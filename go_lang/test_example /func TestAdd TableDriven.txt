
func TestAdd_TableDriven(t *testing.T) {
    tests := []struct {
        name string
        a, b int
        want int
    }{
        {"positive numbers", 2, 3, 5},
        {"negative numbers", -1, -1, -2},
        {"zero case", 0, 0, 0},
    }

    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {  // Subtests for better diagnostics
            got := Add(tt.a, tt.b)
            if got != tt.want {
                t.Errorf("Add(%d, %d) = %d, want %d", tt.a, tt.b, got, tt.want)
            }
        })
    }
}

******** 2/// testCase 2 table Driven (GO standard pattern )
func TestAdd_TableDriven(t *testing.T) {
    tests := []struct {
        name string
        a, b int
        want int
    }{
        {"positive numbers", 2, 3, 5},
        {"negative numbers", -1, -1, -2},
        {"zero case", 0, 0, 0},
    }

    for _, tt := range tests {
        t.Run(tt.name, func(t *testing.T) {  // Subtests for better diagnostics
            got := Add(tt.a, tt.b)
            if got != tt.want {
                t.Errorf("Add(%d, %d) = %d, want %d", tt.a, tt.b, got, tt.want)
            }
        })
    }
}


********* 3// testing errors

func Divide(a, b int) (int, error) {
    if b == 0 {
        return 0, fmt.Errorf("cannot divide by zero")
    }
    return a / b, nil
}

func TestDivide(t *testing.T) {
    t.Run("valid division", func(t *testing.T) {
        result, err := Divide(6, 2)
        if err != nil {
            t.Fatalf("Unexpected error: %v", err)
        }
        if result != 3 {
            t.Errorf("Expected 3, got %d", result)
        }
    })

    t.Run("divide by zero", func(t *testing.T) {
        _, err := Divide(1, 0)
        if err == nil {
            t.Fatal("Expected error but got none")
        }
    })
}

package main

import (
	"strconv"
	"strings"
	"testing"
)

// add evaluates simple addition expressions like "1+2" and returns the result as string
func add(expression string) string {
	parts := strings.Split(expression, "+")
	if len(parts) != 2 {
		return "invalid expression"
	}

	a, err1 := strconv.Atoi(strings.TrimSpace(parts[0]))
	b, err2 := strconv.Atoi(strings.TrimSpace(parts[1]))

	if err1 != nil || err2 != nil {
		return "invalid numbers"
	}

	return strconv.Itoa(a + b)
}

func Test_add(t *testing.T) {
	type args struct {
		expression string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{
			name: "simple addition",
			args: args{"2+3"},
			want: "5",
		},
		{
			name: "with spaces",
			args: args{" 5 + 7 "},
			want: "12",
		},
		{
			name: "invalid expression",
			args: args{"5+3+2"},
			want: "invalid expression",
		},
		{
			name: "non-number input",
			args: args{"a+b"},
			want: "invalid numbers",
		},
		{
			name: "empty input",
			args: args{""},
			want: "invalid expression",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := add(tt.args.expression); got != tt.want {
				t.Errorf("add() = %v, want %v", got, tt.want)
			}
		})
	}
}
